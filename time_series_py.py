# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yCSn5_yc4E4jajnA9TNGGmMY_wLcjS1S
"""

import zipfile
import os
import pandas as pd
import matplotlib.pyplot as plt
import tensorflow as tf
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from keras.layers import Dense, LSTM

local_zip = '/content/room_occupancy_estimation.zip'
zip_ref = zipfile.ZipFile(local_zip, 'r')
zip_ref.extractall('/content')
zip_ref.close()

os.listdir()

df = pd.read_csv('/content/Occupancy_Estimation.csv')
df

df.info()

df.isnull().sum()

df['DateTime'] = df['Date'] + " " + df['Time']
df

df_s1_temp = df[['S1_Temp']].values
min_max_scaler = MinMaxScaler().fit(df_s1_temp)
df_s1_temp = min_max_scaler.transform(df_s1_temp)
df_s1_temp_val_norm = df_s1_temp.ravel()
df['S1_Temp_Norm'] = df_s1_temp_val_norm
df

times_df = df['DateTime'].values
temp_df = df['S1_Temp'].values

plt.figure(figsize=(15,5))
plt.plot(times_df, temp_df)
plt.title('S1 Temp average', fontsize=20);

columns_to_drop = ['Date', 'Time', 'S1_Temp', 'S2_Temp', 'S3_Temp', 'S4_Temp', 'S1_Light', 'S2_Light', 'S3_Light', 'S4_Light', 'S1_Sound', 'S2_Sound', 'S3_Sound', 'S4_Sound',
                   'S5_CO2', 'S5_CO2_Slope', 'S6_PIR', 'S7_PIR', 'Room_Occupancy_Count']

df_data = df.drop(columns=columns_to_drop)
df_data

data_train, data_val = train_test_split(df_data, test_size=0.20, shuffle=False)

data_train

data_val

def windowed_dataset(series, window_size, batch_size, shuffle_buffer):
    series = tf.expand_dims(series, axis=-1)
    ds = tf.data.Dataset.from_tensor_slices(series)
    ds = ds.window(window_size + 1, shift=1, drop_remainder=True)
    ds = ds.flat_map(lambda w: w.batch(window_size + 1))
    ds = ds.shuffle(shuffle_buffer)
    ds = ds.map(lambda w: (w[:-1], w[-1:]))
    return ds.batch(batch_size).prefetch(1)

temp_train  = data_train['S1_Temp_Norm'].values
temp_val  = data_val['S1_Temp_Norm'].values
train_set = windowed_dataset(temp_train, window_size=60, batch_size=100, shuffle_buffer=1000)
val_set = windowed_dataset(temp_val, window_size=60, batch_size=100, shuffle_buffer=1000)

model = tf.keras.models.Sequential([
  tf.keras.layers.LSTM(60, return_sequences=True),
  tf.keras.layers.LSTM(60),
  tf.keras.layers.Dropout(0.4),
  tf.keras.layers.Dense(30, activation="relu"),
  tf.keras.layers.Dense(10, activation="relu"),
  tf.keras.layers.Dense(1),
])

temp_train_max = temp_train.max()
temp_train_max

temp_train_min = temp_train.min()
temp_train_min

threshold_mae = (temp_train_max - temp_train_min) * 0.08
threshold_mae

class ModelCallback(tf.keras.callbacks.Callback):
    def on_epoch_end(self, epoch, logs={}):
        if logs.get('mae') < threshold_mae and logs.get('val_mae') < threshold_mae:
            self.model.stop_training = True

optimizer = tf.keras.optimizers.SGD(learning_rate=1.0000e-04, momentum=0.9)
model.compile(loss=tf.keras.losses.Huber(),
              optimizer=optimizer,
              metrics=["mae"])

history = model.fit(
    train_set,
    batch_size=32,
    epochs=200,
    validation_data=val_set,
    verbose=2,
    callbacks=ModelCallback())

plt.plot(history.history['loss'])
plt.title('Model loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['Train'], loc='upper right')
plt.show()

plt.plot(history.history['mae'])
plt.title('Model mae')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['Train'], loc='upper right')
plt.show()

plt.plot(history.history['val_loss'])
plt.title('Model validation loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['Validation'], loc='upper right')
plt.show()

plt.plot(history.history['val_mae'])
plt.title('Model validation mae')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['Validation'], loc='upper right')
plt.show()